#ifndef __CPROTO__
/* src/client/animations.c */
extern void read_anims();
extern void anims_reset();
/* src/client/client.c */
extern Client_Player cpl;
extern ClientSocket csocket;
extern void DoClient();
extern void SockList_Init(SockList *sl);
extern void SockList_AddChar(SockList *sl, char c);
extern void SockList_AddShort(SockList *sl, uint16 data);
extern void SockList_AddInt(SockList *sl, uint32 data);
extern void SockList_AddString(SockList *sl, char *data);
extern void SockList_AddStringTerminated(SockList *sl, char *data);
extern int GetInt_String(const unsigned char *data);
extern sint64 GetInt64_String(const unsigned char *data);
extern short GetShort_String(const unsigned char *data);
extern char *GetString_String(uint8 *data, int *pos, char *dest, size_t dest_size);
extern int cs_write_string(char *buf, size_t len);
extern void check_animation_status(int anum);
/* src/client/commands.c */
extern void BookCmd(unsigned char *data, int len);
extern void SetupCmd(char *buf, int len);
extern void AddMeFail(unsigned char *data, int len);
extern void AddMeSuccess(unsigned char *data, int len);
extern void AnimCmd(unsigned char *data, int len);
extern void ImageCmd(unsigned char *data, int len);
extern void SkillRdyCmd(char *data, int len);
extern void DrawInfoCmd(unsigned char *data);
extern void DrawInfoCmd2(unsigned char *data, int len);
extern void TargetObject(unsigned char *data, int len);
extern void StatsCmd(unsigned char *data, int len);
extern void PreParseInfoStat(char *cmd);
extern void handle_query(char *data);
extern void send_reply(char *text);
extern void PlayerCmd(unsigned char *data, int len);
extern void ItemXCmd(unsigned char *data, int len);
extern void ItemYCmd(unsigned char *data, int len);
extern void UpdateItemCmd(unsigned char *data, int len);
extern void DeleteItem(unsigned char *data, int len);
extern void DeleteInventory(unsigned char *data);
extern void MapStatsCmd(unsigned char *data, int len);
extern void Map2Cmd(unsigned char *data, int len);
extern void MagicMapCmd(unsigned char *data, int len);
extern void VersionCmd(char *data);
extern void SendVersion();
extern void RequestFile(int idx);
extern void SendAddMe();
extern void NewCharCmd();
extern void DataCmd(unsigned char *data, int len);
extern void ShopCmd(unsigned char *data, int len);
extern void QuestListCmd(unsigned char *data, int len);
extern void ReadyCmd(unsigned char *data, int len);
/* src/client/curl.c */
extern int curl_connect(void *c_data);
extern curl_data *curl_data_new(const char *url);
extern curl_data *curl_download_start(const char *url);
extern sint8 curl_download_finished(curl_data *data);
extern void curl_data_free(curl_data *data);
extern void curl_init();
extern void curl_deinit();
/* src/client/ignore.c */
extern void ignore_list_clear();
extern void ignore_list_load();
extern int ignore_check(const char *name, const char *type);
extern void ignore_command(const char *cmd);
/* src/client/image.c */
extern bmap_struct *bmap_find(const char *name);
extern void bmap_add(bmap_struct *bmap);
extern void read_bmaps_p0();
extern void read_bmaps();
extern void finish_face_cmd(int pnum, uint32 checksum, char *face);
extern int request_face(int pnum);
extern int get_bmap_id(char *name);
extern void blit_face(int id, int x, int y);
/* src/client/item.c */
extern void objects_free(object *op);
extern object *object_find_object_inv(object *op, sint32 tag);
extern object *object_find_object(object *op, sint32 tag);
extern object *object_find(sint32 tag);
extern void object_remove(object *op);
extern void object_remove_inventory(object *op);
extern object *object_create(object *env, sint32 tag, int bflag);
extern void object_set_values(object *op, const char *name, sint32 weight, uint16 face, int flags, uint16 anim, uint16 animspeed, sint32 nrof, uint8 itype, uint8 stype, uint8 qual, uint8 cond, uint8 skill, uint8 level, uint8 dir);
extern void toggle_locked(object *op);
extern void object_send_mark(object *op);
extern void ready_object(object *op);
extern void objects_init();
extern void update_object(int tag, int loc, const char *name, int weight, int face, int flags, int anim, int animspeed, int nrof, uint8 itype, uint8 stype, uint8 qual, uint8 cond, uint8 skill, uint8 level, uint8 direction, int bflag);
extern void animate_objects();
/* src/client/keybind.c */
extern keybind_struct **keybindings;
extern size_t keybindings_num;
extern void keybind_load();
extern void keybind_save();
extern void keybind_free(keybind_struct *keybind);
extern void keybind_deinit();
extern keybind_struct *keybind_add(SDLKey key, SDLMod mod, const char *command);
extern void keybind_edit(size_t i, SDLKey key, SDLMod mod, const char *command);
extern void keybind_remove(size_t i);
extern void keybind_repeat_toggle(size_t i);
extern char *keybind_get_key_shortcut(SDLKey key, SDLMod mod, char *buf, size_t len);
extern keybind_struct *keybind_find_by_command(const char *cmd);
extern int keybind_command_matches_event(const char *cmd, SDL_KeyboardEvent *event);
extern int keybind_command_matches_state(const char *cmd);
extern int keybind_process_event(SDL_KeyboardEvent *event);
extern void keybind_process(keybind_struct *keybind, uint8 type);
extern int keybind_process_command_up(const char *cmd);
extern void keybind_state_ensure();
extern int keybind_process_command(const char *cmd);
/* src/client/main.c */
extern SDL_Surface *ScreenSurface;
extern struct sockaddr_in insock;
extern struct _fire_mode fire_mode_tab[FIRE_MODE_INIT];
extern int RangeFireMode;
extern server_struct *selected_server;
extern uint32 LastTick;
extern int f_custom_cursor;
extern int x_custom_cursor;
extern int y_custom_cursor;
extern int map_udate_flag;
extern int map_redraw_flag;
extern _game_status GameStatus;
extern _anim_table *anim_table;
extern Animations *animations;
extern size_t animations_num;
extern struct screensize *Screensize;
extern _face_struct FaceList[32767];
extern struct msg_anim_struct msg_anim;
extern _Sprite *Bitmaps[BITMAP_INIT];
extern void free_bitmaps();
extern void list_vid_modes();
extern int main(int argc, char *argv[]);
/* src/client/menu.c */
extern int client_command_check(const char *cmd);
extern void send_command_check(const char *cmd);
extern void blt_window_slider(_Sprite *slider, int maxlen, int winlen, int startoff, int len, int x, int y);
/* src/client/metaserver.c */
extern void metaserver_init();
extern void metaserver_disable();
extern server_struct *server_get_id(size_t num);
extern size_t server_get_count();
extern int ms_connecting(int val);
extern void metaserver_clear_data();
extern void metaserver_add(const char *ip, int port, const char *name, int player, const char *version, const char *desc);
extern int metaserver_thread(void *dummy);
extern void metaserver_get_servers();
/* src/client/misc.c */
extern unsigned long isqrt(unsigned long n);
extern size_t split_string(char *str, char *array[], size_t array_size, char sep);
extern void *reallocz(void *ptr, size_t old_size, size_t new_size);
extern void convert_newline(char *str);
extern void browser_open(const char *url);
extern int rndm(int min, int max);
extern char *package_get_version_full(char *dst, size_t dstlen);
extern char *package_get_version_partial(char *dst, size_t dstlen);
/* src/client/player.c */
extern const char *gender_noun[4];
extern void clear_player();
extern void new_player(long tag, long weight, short face);
extern void client_send_apply(int tag);
extern void client_send_examine(int tag);
extern void client_send_move(int loc, int tag, int nrof);
extern void send_command(const char *command);
extern void CompleteCmd(unsigned char *data, int len);
extern void set_weight_limit(uint32 wlim);
extern void init_player_data();
extern void widget_player_data_event(widgetdata *widget, int x, int y);
extern void widget_show_player_data(widgetdata *widget);
extern void widget_player_stats(widgetdata *widget);
extern void widget_skillgroups(widgetdata *widget);
extern void widget_show_player_doll_event();
extern void widget_show_player_doll(widgetdata *widget);
extern void widget_show_main_lvl(widgetdata *widget);
extern void widget_show_skill_exp(widgetdata *widget);
extern void widget_show_regeneration(widgetdata *widget);
extern void widget_show_container(widgetdata *widget);
extern void widget_highlight_menu(widgetdata *widget);
extern void widget_menu_event(widgetdata *widget, int x, int y);
extern void widget_menuitem_event(widgetdata *widget, int x, int y, void (*menu_func_ptr)(widgetdata *, int, int));
extern void widget_show_label(widgetdata *widget);
extern void widget_show_bitmap(widgetdata *widget);
extern int gender_to_id(const char *gender);
/* src/client/porting.c */
/* src/client/scripts.c */
extern void script_load(const char *cparams);
extern void script_list();
extern void script_process();
extern int script_trigger_event(const char *cmd, const uint8 *data, const int data_len, const enum CmdFormat format);
extern void script_send(const char *params);
extern void script_killall();
extern void script_autoload();
extern void script_unload(const char *params);
/* src/client/server_files.c */
extern void server_files_init();
extern void server_files_load(int post_load);
extern FILE *server_file_open(size_t id);
extern void server_file_save(size_t id, unsigned char *data, size_t len);
extern int server_files_updating();
extern void server_files_setup_add(char *buf, size_t buf_size);
extern int server_files_parse_setup(const char *cmd, const char *param);
extern void server_files_clear_update();
/* src/client/server_settings.c */
extern server_settings *s_settings;
extern void server_settings_init();
extern void server_settings_deinit();
/* src/client/settings.c */
extern setting_category **setting_categories;
extern size_t setting_categories_num;
extern void settings_init();
extern void settings_load();
extern void settings_save();
extern void settings_deinit();
extern void *setting_get(setting_struct *setting);
extern const char *setting_get_str(int cat, int setting);
extern sint64 setting_get_int(int cat, int setting);
extern void settings_apply();
extern void settings_apply_change();
extern void setting_set_int(int cat, int setting, sint64 val);
extern int setting_is_text(setting_struct *setting);
extern sint64 category_from_name(const char *name);
extern sint64 setting_from_name(const char *name);
/* src/client/socket.c */
extern void command_buffer_free(command_buffer *buf);
extern int send_command_binary(uint8 cmd, uint8 *body, unsigned int len);
extern int send_socklist(SockList msg);
extern command_buffer *get_next_input_command();
extern void socket_thread_start();
extern void socket_thread_stop();
extern int handle_socket_shutdown();
extern int socket_get_error();
extern int socket_close(struct ClientSocket *csock);
extern int socket_initialize();
extern void socket_deinitialize();
extern int socket_open(struct ClientSocket *csock, char *host, int port);
/* src/client/sound.c */
extern void sound_init();
extern void sound_deinit();
extern void sound_play_effect(const char *filename, int volume);
extern int sound_play_effect_loop(const char *filename, int volume, int loop);
extern void sound_start_bg_music(const char *filename, int volume, int loop);
extern void sound_stop_bg_music();
extern void update_map_bg_music(const char *bg_music);
extern void sound_update_volume();
extern const char *sound_get_bg_music();
extern const char *sound_get_bg_music_basename();
extern uint8 sound_map_background(int new);
extern void SoundCmd(uint8 *data, int len);
extern void sound_ambient_mapcroll(int xoff, int yoff);
extern void sound_ambient_clear();
extern void cmd_sound_ambient(uint8 *data, int len);
extern void sound_pause_music();
extern void sound_resume_music();
extern int sound_playing_music();
/* src/client/sprite.c */
extern struct _anim *start_anim;
extern SDL_Surface *FormatHolder;
extern void sprite_init_system();
extern _Sprite *sprite_load_file(char *fname, uint32 flags);
extern _Sprite *sprite_tryload_file(char *fname, uint32 flag, SDL_RWops *rwop);
extern void sprite_free_sprite(_Sprite *sprite);
extern void sprite_blt(_Sprite *sprite, int x, int y, SDL_Rect *box, _BLTFX *bltfx);
extern void sprite_blt_map(_Sprite *sprite, int x, int y, SDL_Rect *box, _BLTFX *bltfx, uint32 stretch, sint16 zoom, sint16 rotate);
extern Uint32 getpixel(SDL_Surface *surface, int x, int y);
extern void putpixel(SDL_Surface *surface, int x, int y, Uint32 pixel);
extern struct _anim *add_anim(int type, int mapx, int mapy, int value);
extern void remove_anim(struct _anim *anim);
extern void play_anims();
extern int sprite_collision(int x, int y, int x2, int y2, _Sprite *sprite1, _Sprite *sprite2);
extern void surface_pan(SDL_Surface *surface, SDL_Rect *box);
extern void draw_frame(SDL_Surface *surface, int x, int y, int w, int h);
extern void border_create(SDL_Surface *surface, int x, int y, int w, int h, int color, int size);
extern void border_create_line(SDL_Surface *surface, int x, int y, int w, int h, uint32 color);
extern void border_create_sdl_color(SDL_Surface *surface, SDL_Rect *coords, SDL_Color *color);
extern void border_create_color(SDL_Surface *surface, SDL_Rect *coords, const char *color_notation);
/* src/client/tilestretcher.c */
extern int add_color_to_surface(SDL_Surface *dest, Uint8 red, Uint8 green, Uint8 blue);
extern int copy_pixel_to_pixel(SDL_Surface *src, SDL_Surface *dest, int x, int y, int x2, int y2, float brightness);
extern int copy_vertical_line(SDL_Surface *src, SDL_Surface *dest, int src_x, int src_sy, int src_ey, int dest_x, int dest_sy, int dest_ey, float brightness, int extra);
extern SDL_Surface *tile_stretch(SDL_Surface *src, int n, int e, int s, int w);
/* src/client/updates.c */
extern void cmd_request_update(unsigned char *data, int len);
extern int file_updates_finished();
extern void file_updates_parse();
/* src/client/upgrader.c */
extern void upgrader_init();
extern char *upgrader_get_version_partial(char *dst, size_t dstlen);
/* src/client/video.c */
extern int video_get_bpp();
extern int video_set_size();
extern uint32 get_video_flags();
extern int video_fullscreen_toggle(SDL_Surface **surface, uint32 *flags);
/* src/client/wrapper.c */
extern void LOG(LogLevel logLevel, char *format, ...) __attribute__((format(printf, 2, 3)));
extern void system_start();
extern void system_end();
extern char *get_word_from_string(char *str, int *pos);
extern void copy_file(const char *filename, const char *filename_out);
extern void copy_if_exists(const char *from, const char *to, const char *src, const char *dst);
extern void rmrf(const char *path);
extern void copy_rec(const char *src, const char *dst);
extern const char *get_config_dir();
extern void get_data_dir_file(char *buf, size_t len, const char *fname);
extern char *file_path(const char *fname, const char *mode);
extern FILE *fopen_wrapper(const char *fname, const char *mode);
extern SDL_Surface *IMG_Load_wrapper(const char *file);
extern TTF_Font *TTF_OpenFont_wrapper(const char *file, int ptsize);
/* src/events/console.c */
extern void mouse_InputNumber();
/* src/events/event.c */
extern int old_mouse_y;
extern int draggingInvItem(int src);
extern void resize_window(int width, int height);
extern int Event_PollInputDevice();
/* src/events/keys.c */
extern key_struct keys[SDLK_LAST];
extern void init_keys();
extern void key_handle_event(SDL_KeyboardEvent *event);
extern void cursor_keys(int num);
/* src/events/move.c */
extern void move_keys(int num);
extern int dir_from_tile_coords(int tx, int ty);
/* src/gui/book.c */
extern UT_array *book_help_history;
extern void book_name_change(const char *name, size_t len);
extern void book_load(const char *data, int len);
extern void book_redraw();
extern void book_add_help_history(const char *name);
/* src/gui/effects.c */
extern void effects_init();
extern void effects_deinit();
extern void effects_reinit();
extern void effect_sprites_free(effect_struct *effect);
extern void effect_free(effect_struct *effect);
extern void effect_sprite_def_free(effect_sprite_def *sprite_def);
extern void effect_sprite_free(effect_sprite *sprite);
extern void effect_sprite_remove(effect_sprite *sprite);
extern void effect_sprites_play();
extern int effect_start(const char *name);
extern void effect_debug(const char *type);
extern void effect_stop();
extern uint8 effect_has_overlay();
extern void effect_scale(_Sprite *sprite);
/* src/gui/fps.c */
extern void fps_init();
extern void fps_do();
extern void widget_show_fps(widgetdata *widget);
/* src/gui/help.c */
extern void hfiles_deinit();
extern void hfiles_init();
extern void help_show(const char *name);
extern void help_handle_tabulator();
/* src/gui/input.c */
extern void widget_number_event(widgetdata *widget, int x, int y);
extern void widget_show_console(widgetdata *widget);
extern void widget_show_number(widgetdata *widget);
extern void widget_input_do(widgetdata *widget);
/* src/gui/interface.c */
extern void cmd_interface(uint8 *data, int len);
extern void interface_redraw();
/* src/gui/inventory.c */
extern char *skill_level_name[];
extern uint64 inventory_filter;
extern void inventory_filter_set(uint64 filter);
extern void inventory_filter_toggle(uint64 filter);
extern int get_inventory_data(object *op, int *ctag, int *slot, int *start, int *count, int wxlen, int wylen);
extern void widget_inventory_event(widgetdata *widget, int x, int y, SDL_Event event);
extern void widget_show_inventory_window(widgetdata *widget);
extern void widget_below_window_event(widgetdata *widget, int x, int y, int MEvent);
extern void widget_show_below_window(widgetdata *widget);
extern int blt_inv_item_centered(object *tmp, int x, int y);
extern void blt_inv_item(object *tmp, int x, int y);
/* src/gui/main.c */
extern const int char_step_max;
extern void main_screen_render();
extern int main_screen_event(SDL_Event *event);
/* src/gui/map.c */
extern _mapdata MapData;
extern void load_mapdef_dat();
extern void widget_show_mapname(widgetdata *widget);
extern void clear_map();
extern void display_mapscroll(int dx, int dy);
extern void update_map_name(const char *name);
extern void update_map_weather(const char *weather);
extern void init_map_data(int xl, int yl, int px, int py);
extern void align_tile_stretch(int x, int y);
extern void adjust_tile_stretch();
extern void map_set_data(int x, int y, int layer, sint16 face, uint8 quick_pos, uint8 obj_flags, const char *name, const char *name_color, sint16 height, uint8 probe, sint16 zoom, sint16 align, uint8 draw_double, uint8 alpha, sint16 rotate, uint8 infravision);
extern void map_clear_cell(int x, int y);
extern void map_set_darkness(int x, int y, uint8 darkness);
extern void map_draw_map();
extern void map_draw_one(int x, int y, _Sprite *sprite);
extern void widget_map_mevent(widgetdata *widget, SDL_Event *event);
extern void widget_map_render(widgetdata *widget);
extern const char tile_off[24][48];
extern int mouse_to_tile_coords(int mx, int my, int *tx, int *ty);
/* src/gui/menu_buttons.c */
extern void widget_menubuttons(widgetdata *widget);
extern void widget_menubuttons_event(widgetdata *widget, SDL_Event *event);
/* src/gui/mplayer.c */
extern void widget_show_mplayer(widgetdata *widget);
extern void widget_mplayer_background(widgetdata *widget);
extern void widget_mplayer_deinit(widgetdata *widget);
extern void widget_mplayer_mevent(widgetdata *widget, SDL_Event *event);
extern void mplayer_now_playing();
/* src/gui/party.c */
extern void widget_party_background(widgetdata *widget);
extern void widget_party_render(widgetdata *widget);
extern void widget_party_mevent(widgetdata *widget, SDL_Event *event);
extern void PartyCmd(unsigned char *data, int len);
/* src/gui/protections.c */
extern void widget_show_resist(widgetdata *widget);
/* src/gui/quickslots.c */
extern int quickslot_group;
extern int quickslots_pos[8][2];
extern void quickslots_init();
extern void quickslots_handle_key(int slot);
extern int get_quickslot(int x, int y);
extern void show_quickslots(int x, int y, int vertical_quickslot);
extern void widget_quickslots(widgetdata *widget);
extern void widget_quickslots_mouse_event(widgetdata *widget, SDL_Event *event);
extern void QuickSlotCmd(unsigned char *data, int len);
/* src/gui/range.c */
extern void widget_range_event(widgetdata *widget, int x, int y, SDL_Event event, int MEvent);
extern void widget_show_range(widgetdata *widget);
/* src/gui/region_map.c */
extern void region_map_clear();
extern void RegionMapCmd(uint8 *data, int len);
/* src/gui/settings.c */
extern void settings_open();
/* src/gui/skills.c */
extern void widget_skills_render(widgetdata *widget);
extern void widget_skills_mevent(widgetdata *widget, SDL_Event *event);
extern int skill_find(const char *name, size_t *type, size_t *id);
extern int skill_find_type_selected(const char *name, size_t *id);
extern skill_entry_struct *skill_get(size_t type, size_t id);
extern void skills_init();
extern void skills_reload();
extern void SkilllistCmd(char *data);
/* src/gui/spells.c */
extern void widget_spells_render(widgetdata *widget);
extern void widget_spells_mevent(widgetdata *widget, SDL_Event *event);
extern int spell_find(const char *name, size_t *spell_path, size_t *spell_id);
extern int spell_find_path_selected(const char *name, size_t *spell_id);
extern spell_entry_struct *spell_get(size_t spell_path, size_t spell_id);
extern void spells_init();
extern void spells_reload();
extern void SpelllistCmd(char *data);
/* src/gui/target.c */
extern void widget_event_target(widgetdata *widget, int x, int y);
extern void widget_show_target(widgetdata *widget);
/* src/gui/textwin.c */
extern void textwin_init();
extern void textwin_scroll_adjust(widgetdata *widget);
extern void textwin_readjust(widgetdata *widget);
extern void draw_info_flags(const char *color, int flags, const char *str);
extern void draw_info_format(const char *color, char *format, ...) __attribute__((format(printf, 2, 3)));
extern void draw_info(const char *color, const char *str);
extern void textwin_handle_copy();
extern void textwin_show(int x, int y, int w, int h);
extern void widget_textwin_show(widgetdata *widget);
extern void textwin_event(widgetdata *widget, SDL_Event *event);
extern void menu_textwin_clear(widgetdata *widget, int x, int y);
extern void menu_textwin_font_inc(widgetdata *widget, int x, int y);
extern void menu_textwin_font_dec(widgetdata *widget, int x, int y);
/* src/gui/updater.c */
extern void updater_open();
/* src/toolkit/binreloc.c */
extern int br_init(BrInitError *error);
extern int br_init_lib(BrInitError *error);
extern char *br_find_exe(const char *default_exe);
extern char *br_find_exe_dir(const char *default_dir);
extern char *br_find_prefix(const char *default_prefix);
extern char *br_find_bin_dir(const char *default_bin_dir);
extern char *br_find_sbin_dir(const char *default_sbin_dir);
extern char *br_find_data_dir(const char *default_data_dir);
extern char *br_find_locale_dir(const char *default_locale_dir);
extern char *br_find_lib_dir(const char *default_lib_dir);
extern char *br_find_libexec_dir(const char *default_libexec_dir);
extern char *br_find_etc_dir(const char *default_etc_dir);
extern char *br_strcat(const char *str1, const char *str2);
extern char *br_build_path(const char *dir, const char *file);
extern char *br_dirname(const char *path);
/* src/toolkit/button.c */
extern int button_show(int bitmap_id, int bitmap_id_over, int bitmap_id_clicked, int x, int y, const char *text, int font, const char *color, const char *color_shadow, const char *color_over, const char *color_over_shadow, uint64 flags);
extern void button_create(button_struct *button);
extern void button_render(button_struct *button, const char *text);
extern int button_event(button_struct *button, SDL_Event *event);
extern void button_tooltip(button_struct *button, int font, const char *text);
/* src/toolkit/clipboard.c */
extern int clipboard_init();
extern int clipboard_set(const char *str);
extern char *clipboard_get();
/* src/toolkit/list.c */
extern list_struct *list_get_focused();
extern void list_set_focus(list_struct *list);
extern void list_set_parent(list_struct *list, int px, int py);
extern list_struct *list_create(uint32 id, uint32 max_rows, uint32 cols, int spacing);
extern void list_add(list_struct *list, uint32 row, uint32 col, const char *str);
extern void list_remove_row(list_struct *list, uint32 row);
extern void list_set_column(list_struct *list, uint32 col, int width, int spacing, const char *name, int centered);
extern void list_set_font(list_struct *list, int font);
extern void list_scrollbar_enable(list_struct *list);
extern void list_show(list_struct *list, int x, int y);
extern void list_clear_rows(list_struct *list);
extern void list_clear(list_struct *list);
extern void list_offsets_ensure(list_struct *list);
extern void list_remove(list_struct *list);
extern void list_remove_all();
extern int list_handle_keyboard(list_struct *list, SDL_KeyboardEvent *event);
extern int lists_handle_keyboard(SDL_KeyboardEvent *event);
extern int list_handle_mouse(list_struct *list, int mx, int my, SDL_Event *event);
extern int lists_handle_mouse(int mx, int my, SDL_Event *event);
extern list_struct *list_exists(uint32 id);
extern void list_sort(list_struct *list, int type);
extern int list_set_selected(list_struct *list, const char *str, uint32 col);
/* src/toolkit/popup.c */
extern popup_struct *popup_create(int bitmap_id);
extern void popup_destroy(popup_struct *popup);
extern void popup_destroy_all();
extern int popup_overlay_need_update();
extern void popup_render(popup_struct *popup);
extern void popup_render_head();
extern int popup_handle_event(SDL_Event *event);
extern popup_struct *popup_get_head();
extern void popup_overlay_redraw();
/* src/toolkit/progress.c */
extern void progress_dots_create(progress_dots *progress);
extern void progress_dots_show(progress_dots *progress, SDL_Surface *surface, int x, int y);
extern int progress_dots_width(progress_dots *progress);
/* src/toolkit/range_buttons.c */
extern int range_buttons_show(int x, int y, int *val, int advance);
/* src/toolkit/scrollbar.c */
extern void scrollbar_init();
extern void scrollbar_create(scrollbar_struct *scrollbar, int w, int h, uint32 *scroll_offset, uint32 *num_lines, uint32 max_lines);
extern void scrollbar_scroll_adjust(scrollbar_struct *scrollbar, int adjust);
extern void scrollbar_render(scrollbar_struct *scrollbar, SDL_Surface *surface, int x, int y);
extern int scrollbar_event(scrollbar_struct *scrollbar, SDL_Event *event);
extern int scroll_buttons_show(SDL_Surface *surface, int x, int y, int *pos, int max_pos, int advance, SDL_Rect *box);
/* src/toolkit/SDL_gfx.c */
extern int fastPixelColorNolock(SDL_Surface *dst, Sint16 x, Sint16 y, Uint32 color);
extern int fastPixelColorNolockNoclip(SDL_Surface *dst, Sint16 x, Sint16 y, Uint32 color);
extern int fastPixelColor(SDL_Surface *dst, Sint16 x, Sint16 y, Uint32 color);
extern int fastPixelRGBA(SDL_Surface *dst, Sint16 x, Sint16 y, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
extern int fastPixelRGBANolock(SDL_Surface *dst, Sint16 x, Sint16 y, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
extern int _putPixelAlpha(SDL_Surface *dst, Sint16 x, Sint16 y, Uint32 color, Uint8 alpha);
extern int pixelColor(SDL_Surface *dst, Sint16 x, Sint16 y, Uint32 color);
extern int pixelColorNolock(SDL_Surface *dst, Sint16 x, Sint16 y, Uint32 color);
extern int _filledRectAlpha(SDL_Surface *dst, Sint16 xx, Sint16 yy, Sint16 x2, Sint16 y2, Uint32 color, Uint8 alpha);
extern int filledRectAlpha(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 x2, Sint16 y2, Uint32 color);
extern int _HLineAlpha(SDL_Surface *dst, Sint16 x1, Sint16 x2, Sint16 y, Uint32 color);
extern int _VLineAlpha(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 y2, Uint32 color);
extern int pixelColorWeight(SDL_Surface *dst, Sint16 x, Sint16 y, Uint32 color, Uint32 weight);
extern int pixelColorWeightNolock(SDL_Surface *dst, Sint16 x, Sint16 y, Uint32 color, Uint32 weight);
extern int pixelRGBA(SDL_Surface *dst, Sint16 x, Sint16 y, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
extern int hlineColorStore(SDL_Surface *dst, Sint16 x1, Sint16 x2, Sint16 y, Uint32 color);
extern int hlineRGBAStore(SDL_Surface *dst, Sint16 x1, Sint16 x2, Sint16 y, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
extern int hlineColor(SDL_Surface *dst, Sint16 x1, Sint16 x2, Sint16 y, Uint32 color);
extern int hlineRGBA(SDL_Surface *dst, Sint16 x1, Sint16 x2, Sint16 y, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
extern int vlineColor(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 y2, Uint32 color);
extern int vlineRGBA(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 y2, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
extern int rectangleColor(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 x2, Sint16 y2, Uint32 color);
extern int rectangleRGBA(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 x2, Sint16 y2, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
extern int roundedRectangleColor(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 x2, Sint16 y2, Sint16 rad, Uint32 color);
extern int roundedRectangleRGBA(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 x2, Sint16 y2, Sint16 rad, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
extern int roundedBoxColor(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 x2, Sint16 y2, Sint16 rad, Uint32 color);
extern int roundedBoxRGBA(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 x2, Sint16 y2, Sint16 rad, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
extern int boxColor(SDL_Surface *dst, Sint16 xx, Sint16 yy, Sint16 x2, Sint16 y2, Uint32 color);
extern int boxRGBA(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 x2, Sint16 y2, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
extern int lineColor(SDL_Surface *dst, Sint16 xx, Sint16 yy, Sint16 x2, Sint16 y2, Uint32 color);
extern int lineRGBA(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 x2, Sint16 y2, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
extern int _aalineColor(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 x2, Sint16 y2, Uint32 color, int draw_endpoint);
extern int aalineColor(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 x2, Sint16 y2, Uint32 color);
extern int aalineRGBA(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 x2, Sint16 y2, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
extern int circleColor(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 rad, Uint32 color);
extern int circleRGBA(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 rad, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
extern int arcColor(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 rad, Sint16 start, Sint16 end, Uint32 color);
extern int arcRGBA(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 rad, Sint16 start, Sint16 end, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
extern int aacircleColor(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 rad, Uint32 color);
extern int aacircleRGBA(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 rad, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
extern int filledCircleColor(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 rad, Uint32 color);
extern int filledCircleRGBA(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 rad, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
extern int ellipseColor(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint32 color);
extern int ellipseRGBA(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
extern int aaellipseColor(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint32 color);
extern int aaellipseRGBA(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
extern int filledEllipseColor(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint32 color);
extern int filledEllipseRGBA(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
extern int _pieColor(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 rad, Sint16 start, Sint16 end, Uint32 color, Uint8 filled);
extern int pieColor(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 rad, Sint16 start, Sint16 end, Uint32 color);
extern int pieRGBA(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 rad, Sint16 start, Sint16 end, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
extern int filledPieColor(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 rad, Sint16 start, Sint16 end, Uint32 color);
extern int filledPieRGBA(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 rad, Sint16 start, Sint16 end, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
extern int trigonColor(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 x2, Sint16 y2, Sint16 x3, Sint16 y3, Uint32 color);
extern int trigonRGBA(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 x2, Sint16 y2, Sint16 x3, Sint16 y3, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
extern int aatrigonColor(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 x2, Sint16 y2, Sint16 x3, Sint16 y3, Uint32 color);
extern int aatrigonRGBA(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 x2, Sint16 y2, Sint16 x3, Sint16 y3, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
extern int filledTrigonColor(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 x2, Sint16 y2, Sint16 x3, Sint16 y3, Uint32 color);
extern int filledTrigonRGBA(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 x2, Sint16 y2, Sint16 x3, Sint16 y3, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
extern int polygonColor(SDL_Surface *dst, const Sint16 *vx, const Sint16 *vy, int n, Uint32 color);
extern int polygonRGBA(SDL_Surface *dst, const Sint16 *vx, const Sint16 *vy, int n, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
extern int aapolygonColor(SDL_Surface *dst, const Sint16 *vx, const Sint16 *vy, int n, Uint32 color);
extern int aapolygonRGBA(SDL_Surface *dst, const Sint16 *vx, const Sint16 *vy, int n, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
extern int _gfxPrimitivesCompareInt(const void *a, const void *b);
extern int filledPolygonColorMT(SDL_Surface *dst, const Sint16 *vx, const Sint16 *vy, int n, Uint32 color, int **polyInts, int *polyAllocated);
extern int filledPolygonRGBAMT(SDL_Surface *dst, const Sint16 *vx, const Sint16 *vy, int n, Uint8 r, Uint8 g, Uint8 b, Uint8 a, int **polyInts, int *polyAllocated);
extern int filledPolygonColor(SDL_Surface *dst, const Sint16 *vx, const Sint16 *vy, int n, Uint32 color);
extern int filledPolygonRGBA(SDL_Surface *dst, const Sint16 *vx, const Sint16 *vy, int n, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
extern int _HLineTextured(SDL_Surface *dst, Sint16 x1, Sint16 x2, Sint16 y, SDL_Surface *texture, int texture_dx, int texture_dy);
extern int texturedPolygonMT(SDL_Surface *dst, const Sint16 *vx, const Sint16 *vy, int n, SDL_Surface *texture, int texture_dx, int texture_dy, int **polyInts, int *polyAllocated);
extern int texturedPolygon(SDL_Surface *dst, const Sint16 *vx, const Sint16 *vy, int n, SDL_Surface *texture, int texture_dx, int texture_dy);
extern double _evaluateBezier(double *data, int ndata, double t);
extern int bezierColor(SDL_Surface *dst, const Sint16 *vx, const Sint16 *vy, int n, int s, Uint32 color);
extern int bezierRGBA(SDL_Surface *dst, const Sint16 *vx, const Sint16 *vy, int n, int s, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
extern int thickLineColor(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 x2, Sint16 y2, Uint8 width, Uint32 color);
extern int thickLineRGBA(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 x2, Sint16 y2, Uint8 width, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
/* src/toolkit/SDL_rotozoom.c */
extern Uint32 _colorkey(SDL_Surface *src);
extern int _shrinkSurfaceRGBA(SDL_Surface *src, SDL_Surface *dst, int factorx, int factory);
extern int _shrinkSurfaceY(SDL_Surface *src, SDL_Surface *dst, int factorx, int factory);
extern int _zoomSurfaceRGBA(SDL_Surface *src, SDL_Surface *dst, int flipx, int flipy, int smooth);
extern int _zoomSurfaceY(SDL_Surface *src, SDL_Surface *dst, int flipx, int flipy);
extern void _transformSurfaceRGBA(SDL_Surface *src, SDL_Surface *dst, int cx, int cy, int isin, int icos, int flipx, int flipy, int smooth);
extern void transformSurfaceY(SDL_Surface *src, SDL_Surface *dst, int cx, int cy, int isin, int icos, int flipx, int flipy);
extern SDL_Surface *rotateSurface90Degrees(SDL_Surface *src, int numClockwiseTurns);
extern void _rotozoomSurfaceSizeTrig(int width, int height, double angle, double zoomx, double zoomy, int *dstwidth, int *dstheight, double *canglezoom, double *sanglezoom);
extern void rotozoomSurfaceSizeXY(int width, int height, double angle, double zoomx, double zoomy, int *dstwidth, int *dstheight);
extern void rotozoomSurfaceSize(int width, int height, double angle, double zoom, int *dstwidth, int *dstheight);
extern SDL_Surface *rotozoomSurface(SDL_Surface *src, double angle, double zoom, int smooth);
extern SDL_Surface *rotozoomSurfaceXY(SDL_Surface *src, double angle, double zoomx, double zoomy, int smooth);
extern void zoomSurfaceSize(int width, int height, double zoomx, double zoomy, int *dstwidth, int *dstheight);
extern SDL_Surface *zoomSurface(SDL_Surface *src, double zoomx, double zoomy, int smooth);
extern SDL_Surface *shrinkSurface(SDL_Surface *src, int factorx, int factory);
/* src/toolkit/sha1.c */
extern void sha1_starts(sha1_context *ctx);
extern void sha1_update(sha1_context *ctx, const unsigned char *input, size_t ilen);
extern void sha1_finish(sha1_context *ctx, unsigned char output[20]);
extern void sha1(const unsigned char *input, size_t ilen, unsigned char output[20]);
extern int sha1_file(const char *path, unsigned char output[20]);
extern void sha1_hmac_starts(sha1_context *ctx, const unsigned char *key, size_t keylen);
extern void sha1_hmac_update(sha1_context *ctx, const unsigned char *input, size_t ilen);
extern void sha1_hmac_finish(sha1_context *ctx, unsigned char output[20]);
extern void sha1_hmac_reset(sha1_context *ctx);
extern void sha1_hmac(const unsigned char *key, size_t keylen, const unsigned char *input, size_t ilen, unsigned char output[20]);
/* src/toolkit/text.c */
extern SDL_Color text_link_color_default;
extern SDL_Color text_link_color;
extern font_struct fonts[FONTS_MAX];
extern void text_init();
extern void text_deinit();
extern void text_offset_set(int x, int y);
extern void text_offset_reset();
extern void text_color_set(int r, int g, int b);
extern void text_set_selection(sint64 *start, sint64 *end, uint8 *started);
extern const char *get_font_filename(int font);
extern int get_font_id(const char *name, size_t size);
extern char *text_strip_markup(char *buf, size_t *buf_len, uint8 do_free);
extern int text_color_parse(const char *color_notation, SDL_Color *color);
extern void blt_character_init(text_blit_info *info);
extern int blt_character(int *font, int orig_font, SDL_Surface *surface, SDL_Rect *dest, const char *cp, SDL_Color *color, SDL_Color *orig_color, uint64 flags, SDL_Rect *box, int *x_adjust, text_blit_info *info);
extern int glyph_get_width(int font, char c);
extern int glyph_get_height(int font, char c);
extern void string_blt(SDL_Surface *surface, int font, const char *text, int x, int y, const char *color_notation, uint64 flags, SDL_Rect *box);
extern void string_blt_shadow(SDL_Surface *surface, int font, const char *text, int x, int y, const char *color_notation, const char *color_shadow_notation, uint64 flags, SDL_Rect *box);
extern void string_blt_format(SDL_Surface *surface, int font, int x, int y, const char *color_notation, uint64 flags, SDL_Rect *box, const char *text, ...) __attribute__((format(printf, 8, 9)));
extern void string_blt_shadow_format(SDL_Surface *surface, int font, int x, int y, const char *color_notation, const char *color_shadow_notation, uint64 flags, SDL_Rect *box, const char *text, ...) __attribute__((format(printf, 9, 10)));
extern int string_get_width(int font, const char *text, uint64 flags);
extern int string_get_height(int font, const char *text, uint64 flags);
extern void string_truncate_overflow(int font, char *text, int max_width);
extern void text_enable_debug();
/* src/toolkit/text_input.c */
extern char text_input_string[256];
extern int text_input_count;
extern int text_input_string_flag;
extern int text_input_string_end_flag;
extern int text_input_string_esc_flag;
extern uint32 text_input_opened;
extern int text_input_center_offset();
extern void text_input_draw_background(SDL_Surface *surface, int x, int y, int bitmap);
extern void text_input_draw_text(SDL_Surface *surface, int x, int y, int font, const char *text, const char *color_notation, uint64 flags, int bitmap, SDL_Rect *box);
extern void text_input_show(SDL_Surface *surface, int x, int y, int font, const char *text, const char *color_notation, uint64 flags, int bitmap, SDL_Rect *box);
extern void text_input_clear();
extern void text_input_open(int maxchar);
extern void text_input_close();
extern void text_input_history_clear();
extern void text_input_add_string(const char *text);
extern int text_input_handle(SDL_KeyboardEvent *key);
/* src/toolkit/tooltip.c */
extern void tooltip_create(int mx, int my, int font, const char *text);
extern void tooltip_show();
/* src/toolkit/widget.c */
extern widgetdata *cur_widget[TOTAL_SUBWIDGETS];
extern widgetevent widget_mouse_event;
extern void init_widgets_fromCurrent();
extern widgetdata *create_widget_object(int widget_subtype_id);
extern void remove_widget_object(widgetdata *widget);
extern void remove_widget_object_intern(widgetdata *widget);
extern void remove_widget_inv(widgetdata *widget);
extern void init_widgets();
extern void kill_widgets();
extern void reset_widget(const char *name);
extern void widgets_ensure_onscreen();
extern void kill_widget_tree(widgetdata *widget);
extern widgetdata *create_widget(int widget_id);
extern void remove_widget(widgetdata *widget);
extern void detach_widget(widgetdata *widget);
extern void save_interface_file();
extern void save_interface_file_rec(widgetdata *widget, FILE *stream);
extern int widget_event_mousedn(int x, int y, SDL_Event *event);
extern int widget_event_mouseup(int x, int y, SDL_Event *event);
extern int widget_event_mousemv(int x, int y, SDL_Event *event);
extern int widget_event_start_move(widgetdata *widget, int x, int y);
extern int widget_event_move_stop(int x, int y);
extern int widget_event_respond(int x, int y);
extern int widget_event_override();
extern widgetdata *get_widget_owner(int x, int y, widgetdata *start, widgetdata *end);
extern widgetdata *get_widget_owner_rec(int x, int y, widgetdata *widget, widgetdata *end);
extern void process_widgets();
extern void process_widgets_rec(widgetdata *widget);
extern void SetPriorityWidget(widgetdata *node);
extern void SetPriorityWidget_reverse(widgetdata *node);
extern void insert_widget_in_container(widgetdata *widget_container, widgetdata *widget);
extern widgetdata *get_outermost_container(widgetdata *widget);
extern widgetdata *widget_find_by_surface(SDL_Surface *surface);
extern void move_widget(widgetdata *widget, int x, int y);
extern void move_widget_rec(widgetdata *widget, int x, int y);
extern void resize_widget(widgetdata *widget, int side, int offset);
extern void resize_widget_rec(widgetdata *widget, int x, int width, int y, int height);
extern widgetdata *add_label(char *text, int font, const char *color);
extern widgetdata *add_bitmap(int bitmap_id);
extern widgetdata *create_menu(int x, int y, widgetdata *owner);
extern void add_menuitem(widgetdata *menu, char *text, void (*menu_func_ptr)(widgetdata *, int, int), int menu_type, int val);
extern void add_separator(widgetdata *widget);
extern void menu_finalize(widgetdata *widget);
extern void widget_redraw_all(int widget_type_id);
extern void menu_move_widget(widgetdata *widget, int x, int y);
extern void menu_create_widget(widgetdata *widget, int x, int y);
extern void menu_remove_widget(widgetdata *widget, int x, int y);
extern void menu_detach_widget(widgetdata *widget, int x, int y);
extern void menu_set_say_filter(widgetdata *widget, int x, int y);
extern void menu_set_shout_filter(widgetdata *widget, int x, int y);
extern void menu_set_gsay_filter(widgetdata *widget, int x, int y);
extern void menu_set_tell_filter(widgetdata *widget, int x, int y);
extern void menu_set_channel_filter(widgetdata *widget, int x, int y);
extern void submenu_chatwindow_filters(widgetdata *widget, int x, int y);
extern void menu_inv_filter_all();
extern void menu_inv_filter_applied();
extern void menu_inv_filter_containers();
extern void menu_inv_filter_magical();
extern void menu_inv_filter_cursed();
extern void menu_inv_filter_unidentified();
extern void menu_inv_filter_locked();
extern void menu_inv_filter_unapplied();
/* src/toolkit/stringbuffer.c*/
extern StringBuffer *stringbuffer_new();
extern char *stringbuffer_finish(StringBuffer *sb);
extern void stringbuffer_append_string(StringBuffer *sb, const char *str);
extern void stringbuffer_append_printf(StringBuffer *sb, const char *format, ...) __attribute__((format(printf, 2, 3)));
extern void stringbuffer_append_stringbuffer(StringBuffer *sb, const StringBuffer *sb2);
extern size_t stringbuffer_length(StringBuffer *sb);
#endif
